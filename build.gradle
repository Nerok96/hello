// This block defines the dependencies of the build script itself.
buildscript {

    // The repositories block indicates that the build should resolve its dependencies from the Maven
    // Central repository. Gradle leans heavily on many conventions and facilities established by the
    // Maven build tool, including the option of using Maven Central as a source of library dependencies.

    repositories {
        mavenCentral()
    }

    // The dependencies block contains all the external dependencies that are need.

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco' //Plugin to calculate code coverage
apply from: "${rootProject.rootDir}/config/pmd/pmd.gradle"      //Plugin of a source code analyzer. It finds common programming flaws like unused variables,
                      // empty catch blocks, unnecessary object creation, and so forth. Additionally it includes copy-paste-detector.
apply plugin: 'checkstyle'
apply plugin: 'jdepend'//Plugin to detect problem with dependencies

// The jar block specifies how the JAR file will be named. In this case, it will render hello-1.0.jar.

jar {
    baseName = 'hello'
    version = '1.0'
}

sourceCompatibility = 1.8 // Java version compatibility to use when compiling java source
targetCompatibility = 1.8 // Java version to generate clases for

// The war block specifies how the WAR file will be named. In this case, it will render hello-1.0.jar.

war {
    baseName = 'hello'
    version = '1.0'
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:1.2.6.RELEASE'
    compile 'org.webjars:bootstrap:3.3.5'

    // 'providedRuntime' dependencies are not added to the WAR archive
    // because they should already be in the execution environment
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
         file {
             whenMerged { c ->
                 c.entries.findAll {entry -> entry.kind=='lib' && entry.moduleVersion.name?.startsWith('tomcat-')  }*.exported = false
             }
         }
    }
}

// This task checks the cyles of dependencies in the test
jdependMain.doLast {
   File file = new File(jdepend.reportsDir, "main.xml");
   assert file.exists() && file.isFile(), "File '$file' must exist"

   def numberOfCycles = new XmlSlurper().parse(file).Cycles.Package.size()
   assert numberOfCycles == 0, """We have detected $numberOfCycles cycles. Checkout report file: $file.
                                    """
}

// This task will generate a report file under $buildDir/reports/jacoco/test
// with code coverage stats. It will generate files in xml and html formats.
// Note that this task will be skipped if no test are run (e.g., if test are UP TO DATE)

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

checkstyle {
  toolVersion = "6.0"
}

test {
    // Try to run jacocoTestReport on test end (even if it fails)
    finalizedBy jacocoTestReport
}

// The following task provides the Gradle Wrapper to the project. The Gradle Wrapper consists of
// a batch script for Windows and a shell script for OS X and Linux. These scripts allow to run a
// Gradle build without requiring that Gradle be installed on your system. gradleVersion is the
// version the project should use

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

//When installApp task is fired, it will create production files on dist/ folder
installApp{
        destinationDir = file('dist')
}

//This task is called by Heroku on every github push.
//It only declares that needs "build" and installApp" task to run
//InstallApp tasks prepare production files that are going to be executed
task stage(dependsOn: [build,installApp]) {

}
